\SYNBOL{}\SYN[Define]{extension} \SYN[Function]{String} \{\SYNEOL{}
\SYNBOL{}    \SYN[Define]{func} \SYN[Function]{uppercasedFirst}\SYN[swiftParenthesisRegion]{()} \SYN[Delimiter]{->} \SYN[Type]{String} \{\SYNEOL{}
\SYNBOL{}        \SYN[Define]{let} \SYN[Identifier]{firstCharacter} \SYN[Function]{=} \SYN[Operator]{prefix}\SYN[swiftParenthesisRegion]{(}\SYN[Number]{1}\SYN[swiftParenthesisRegion]{)}.capitalized\SYNEOL{}
\SYNBOL{}        \SYN[Define]{let} \SYN[Identifier]{remainingCharacters} \SYN[Function]{=} dropFirst\SYN[swiftParenthesisRegion]{()}.lowercased\SYN[swiftParenthesisRegion]{()}\SYNEOL{}
\SYNBOL{}        \SYN[Statement]{return} firstCharacter \SYN[Function]{+} remainingCharacters\SYNEOL{}
\SYNBOL{}    \}\SYNEOL{}
\SYNBOL{}\}\SYNEOL{}
\SYNBOL{}\SYN[Operator]{final} \SYN[Define]{class} \SYN[Function]{StringExtensionsTests}\SYN[Delimiter]{:} \SYN[Type]{XCTestCase} \{\SYNEOL{}
\SYNBOL{}    \SYN[Define]{func} \SYN[Function]{testUppercaseFirst}\SYN[swiftParenthesisRegion]{()} \{\SYNEOL{}
\SYNBOL{}        \SYN[Define]{let} \SYN[Identifier]{input} \SYN[Function]{=} \SYN[String]{"antoine"}\SYNEOL{}
\SYNBOL{}        \SYN[Define]{let} \SYN[Identifier]{expectedOutput} \SYN[Function]{=} \SYN[String]{"Antoine"}\SYNEOL{}
\SYNBOL{}        XCTAssertEqual\SYN[swiftParenthesisRegion]{(input.uppercasedFirst(), expectedOutput)}\SYNEOL{}
\SYNBOL{}    \}\SYNEOL{}
\SYNBOL{}\}\SYNEOL{}
